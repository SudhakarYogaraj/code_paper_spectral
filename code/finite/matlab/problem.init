#include "Problem.hpp"
#include "templates.hpp"
#include "Gaussian_integrator.hpp"
#include "toolbox.hpp"
#include "io.hpp"

using namespace std;

void Problem::init() {

    this->t_end = 1.;
    this->nf = 2;
    this->ns = 1;
    this->x0 = vector<double>(ns,1.2);
    this->lambdas = {2};
    this->betas   = {sqrt(2)};
    this->bias = vector<double>(nf, 0.);
    this->sigmas = vector<double>(nf, 1.);
    this->sqrt_cov = vector< vector<double> > (nf, vector<double> (nf,0.));
    this->covariance = vector< vector<double> > (nf, vector<double> (nf,0.));
    this->inv_cov = vector< vector<double> > (nf, vector<double> (nf,0.));
    this->det_sqrt_cov = 1.;
    for (int i = 0; i < nf; ++i) {
        sqrt_cov[i][i] = 1.;
    }
}

/*
 * Calculation of the sqrt_cov and mean of the invariant measure.
 * The outer loop serves to obtain a more accurate result.
 */
void Problem::update_stats(vector<double> x) {

    Gaussian_integrator gauss = Gaussian_integrator(30, nf);
    vector<double> sigmas_quad (nf, 1.);

    int n_iterations = 5, i = 0;
    for (int n = 0; n < n_iterations; ++n) {

        // Calculation of the bias of 'rho'
        bias = vector<double> (nf, 0.);
        for (i = 0; i < nf; ++i) {
            auto lambda = [&] (vector<double> z) -> double {
                vector<double> y = rescale(z);
                return det_sqrt_cov * y[i] * (rho(x,y)/gaussian(z, sigmas_quad));
            };
            bias[i] = gauss.quadnd(lambda, sigmas_quad);
        }

        // Calculation of the sqrt_cov
        for (i = 0; i < nf; ++i) {
            for (int j = 0; j < nf; ++j) {
                auto lambda = [&] (vector<double> z) -> double {
                    vector<double> y = rescale(z);
                    return det_sqrt_cov * (y[i] - bias[i]) * (y[j] - bias[j]) * (rho(x,y)/gaussian(z, sigmas_quad));
                };
                covariance[i][j] = gauss.quadnd(lambda, sigmas_quad);
            }
        }
        sqrt_cov = cholesky(covariance);

        // Determinant of sqrt_cov
        for (det_sqrt_cov = 1., i = 0; i < nf; ++i)
            det_sqrt_cov *= sqrt_cov[i][i];

        // Inverse of covariance matrix
        for (int i = 0; i < nf; ++i) {
            vector<double> rhs_tmp(nf, 0.); rhs_tmp[i] = 1.;
            inv_cov[i] = solve(covariance, rhs_tmp);
        }
        inv_cov = transpose(inv_cov);
    }

    niceMat(sqrt_cov);
    cout << " --- " << endl;
    niceMat(covariance);
    cout << " --- " << endl;
    niceMat(inv_cov);
    cout << " --- " << endl;
    niceVec(bias);
}

double Problem::linear_term_gaussian(vector<double> y) {

    // Square of the factor multiplying the brownian motion
    double S = 2.;

    // Laplacian of the potential
    double laplacian = 0.;
    for (int i = 0; i < nf; ++i) {
        laplacian += inv_cov[i][i];
    }

    // Square of the gradient of the potential
    double grad2 = 0.;
    vector<double> c_grad (nf, 0.);
    for (int i = 0; i < nf; ++i) {
        for (int j = 0; j < nf; ++j) {
            c_grad[i] += inv_cov[i][j] * y[j];
        }
        grad2 += c_grad[i] * c_grad[i];
    }

    // Linear potential in Schrodinger equation
    return (0.25 * S * laplacian - 0.125 * S * grad2);
}

vector<double> Problem::rescale(vector<double> y) {
    vector<double> result(y.size(), 0.);
    for (int i = 0; i < y.size(); ++i) {
        for (int j = 0; j < y.size(); ++j) {
            result[i] += sqrt_cov[i][j] * y[j];
        }
    }
    return (result + bias);
}

double Problem::stardiv_h(vector<double> x, vector<double> y) {
    double result = 0.;
    vector<double> fast_h = this->fast_drift_h(x,y);
    vector<double> gradient_v = this->grad(x,y);
    vector< vector<double> > gradient_h = this->grad_h(x,y);
    for (int i = 0; i < this->nf; ++i) {
        result += gradient_v[i] * fast_h[i] - gradient_h[i][i];
    }
    return result;
}

vector<double> Problem::soldrif(vector<double> x) {
    vector<double> result(this->ns,0.);
    Gaussian_integrator gauss = Gaussian_integrator(100,this->nf);
    auto lambda = [&] (vector<double> z) -> vector<double> {
        vector<double> y = rescale(z);
        double div_h = stardiv_h(x,y);
        vector<double> tmp(this->ns,0.);
        vector<double> slow_drift = this->a(x,y);
        vector<double> solution = this->phi(x,y);
        vector< vector<double> > diff_phi_x = this->phi_x(x,y);
        for (int i = 0; i < this->ns; ++i) {
            tmp = tmp + diff_phi_x[i]*slow_drift[i];
        }
        tmp = tmp + solution * div_h;
        return tmp*(this->rho(x,y)/gaussian(z,sigmas));
    };
    result = gauss.quadnd(lambda, sigmas, result) * det_sqrt_cov;
    return result;
}

vector< vector<double> > Problem::soldiff(vector<double> x) {
    Gaussian_integrator gauss = Gaussian_integrator(100,this->nf);
    vector< vector<double> > result(this->ns,vector<double>(this->ns,0.));
    auto lambda = [&] (vector<double> z) -> vector< vector<double> > {
        vector<double> y = rescale(z);
        vector< vector<double> > tens_prod(this->ns, vector<double>(this->ns, 0.));
        vector<double> slowdrift = this->a(x,y);
        vector<double> solution  = this->phi(x,y);
        for (int i = 0; i < this->ns; ++i) {
            for (int j = 0; j < this->ns; ++j) {
                tens_prod[i][j] = 2*slowdrift[i]*solution[j]*(this->rho(x,y)/gaussian(z,sigmas));
            }
        }
        return tens_prod;
    };
    result = cholesky(symmetric( gauss.quadnd(lambda, sigmas, result) * det_sqrt_cov ));
    return result;
}

/* vector< vector<double> > Problem::day(vector<double> x, vector<double> y) { */
/*     vector< vector<double> > result(this->ns,vector<double>(this->nf,0.)); */
/*     result[0][0] = cos(x[0])*(2*cos(y[0]) - 2*y[0]*sin(y[0]) + cos(y[0])); */
/*     return result; */
/* } */

/* vector<double> Problem::drif(vector<double> x, vector<double> y) { */
/*     vector<double> result(2*this->nf,0.); */
/*     result[0] = -2*y[0]; */
/*     result[1] = -2*y[1] + cos(x[0])*cos(y[0]); */
/*     return result; */
/* } */

/* vector<double> Problem::diff(vector<double> x, vector<double> y) { */
/*     vector<double> result(2*nf,0.); */
/*     result[0] = sqrt(2.); */
/*     return result; */
/* } */
