#include "Gaussian_integrator.hpp"
#include "templates.hpp"

using namespace std;

static vector<double> nodes_4 = { 5.24647623275290317900e-01,    1.65068012388578455585e+00 };
static vector<double> weights_4 = { 8.04914090005512836482e-01,    8.13128354472451771398e-02 };
static vector<double> nodes_6 = { 2.35060497367449222281e+00,    4.36077411927616508688e-01, 1.33584907401369694976e+00 };
static vector<double> weights_6 = { 4.53000990550884564102e-03,    7.24629595224392524086e-01, 1.57067320322856643914e-01 };
static vector<double> nodes_10 = { 3.42901327223704608781e-01,    1.03661082978951365422e+00, 1.75668364929988177344e+00,    2.53273167423278979644e+00, 3.43615911883773760341e+00 };
static vector<double> weights_10 = { 6.10862633735325798764e-01,    2.40138611082314686412e-01, 3.38743944554810631376e-02,    1.34364574678123269223e-03, 7.64043285523262062930e-06 };
static vector<double> nodes_20 = { 2.45340708300901249903e-01,    7.37473728545394358719e-01, 1.23407621539532300786e+00,    1.73853771211658620678e+00, 2.25497400208927552311e+00,    2.78880605842813048055e+00, 3.34785456738321632688e+00,    3.94476404011562521040e+00, 4.60368244955074427298e+00,    5.38748089001123286199e+00 };
static vector<double> weights_20 = { 4.62243669600610089640e-01,    2.86675505362834129720e-01, 1.09017206020023320014e-01,    2.48105208874636108814e-02, 3.24377334223786183217e-03,    2.28338636016353967260e-04, 7.80255647853206369398e-06,    1.08606937076928169398e-07, 4.39934099227318055366e-10,    2.22939364553415129254e-13 };
static vector<double> nodes_30 = { 0.2011285765488714855458, 0.6039210586255523077782, 1.008338271046723461805, 1.415527800198188511941, 1.826741143603688038836, 2.243391467761504072473, 2.667132124535617200571, 3.099970529586441748689, 3.544443873155349886925, 4.003908603861228815228, 4.483055357092518341887, 4.988918968589943944486, 5.533147151567495725118, 6.138279220123934620395, 6.863345293529891581061};
static vector<double> weights_30 = { 0.3863948895418138625556, 0.2801309308392126674135, 0.1467358475408900997517, 0.05514417687023425116808, 0.01470382970482668351528, 0.00273792247306765846299, 3.48310124318685523421E-4, 2.9387252289229876415E-5, 1.57909488732471028835E-6, 5.10852245077594627739E-8, 9.178580424378528209E-10, 8.10618629746304420399E-12, 2.87860708054870606219E-14, 2.8103336027509037088E-17, 2.90825470013122622941E-21};
static vector<double> nodes_100 = { 1.10795872422439482889e-01,    3.32414692342231807054e-01, 5.54114823591616988249e-01,    7.75950761540145781976e-01, 9.97977436098105243902e-01,    1.22025039121895305882e+00, 1.44282597021593278768e+00,    1.66576150874150946983e+00, 1.88911553742700837153e+00,    2.11294799637118795206e+00, 2.33732046390687850509e+00,    2.56229640237260802502e+00, 2.78794142398198931316e+00,    3.01432358033115551667e+00, 3.24151367963101295043e+00,    3.46958563641858916968e+00, 3.69861685931849193984e+00,    3.92868868342767097205e+00, 4.15988685513103054019e+00,    4.39230207868268401677e+00, 4.62603063578715577309e+00,    4.86117509179121020995e+00, 5.09784510508913624692e+00,    5.33615836013836049734e+00, 5.57624164932992410311e+00,    5.81823213520351704715e+00, 6.06227883261430263882e+00,    6.30854436111213512156e+00, 6.55720703192153931598e+00,    6.80846335285879641431e+00, 7.06253106024886543766e+00,    7.31965282230453531632e+00, 7.58010080785748888415e+00,    7.84418238446082116862e+00, 8.11224731116279191689e+00,    8.38469694041626507474e+00, 8.66199616813451771409e+00,    8.94468921732547447845e+00, 9.23342089021916155069e+00,    9.52896582339011480496e+00, 9.83226980777796909401e+00,    1.01445099412928454695e+01, 1.04671854213428121416e+01,    1.08022607536847145950e+01, 1.11524043855851252649e+01,    1.15214154007870302416e+01, 1.19150619431141658018e+01,    1.23429642228596742953e+01, 1.28237997494878089065e+01,    1.34064873381449101387e+01 };
static vector<double> weights_100 = { 2.18892629587439125060e-01,    1.98462850254186477710e-01, 1.63130030502782941425e-01,    1.21537986844104181985e-01, 8.20518273912244646789e-02,    5.01758126774286956964e-02, 2.77791273859335142698e-02,    1.39156652202318064178e-02, 6.30300028560805254921e-03,    2.57927326005909017346e-03, 9.52692188548619117497e-04,    3.17291971043300305539e-04, 9.51716277855096647040e-05,    2.56761593845490630553e-05, 6.22152481777786331722e-06,    1.35179715911036728661e-06, 2.62909748375372507934e-07,    4.56812750848493951350e-08, 7.07585728388957290740e-09,    9.74792125387162124528e-10, 1.19130063492907294976e-10,    1.28790382573155823282e-11, 1.22787851441012497000e-12,    1.02887493735099254677e-13, 7.54889687791524329227e-15,    4.82983532170303334787e-16, 2.68249216476037608006e-17,    1.28683292112115327575e-18, 5.30231618313184868536e-20,    1.86499767513025225814e-21, 5.56102696165916731717e-23,    1.39484152606876708047e-24, 2.91735007262933241788e-26,    5.03779116621318778423e-28, 7.10181222638493422964e-30,    8.06743427870937717382e-32, 7.27457259688776757460e-34,    5.11623260438522218054e-36, 2.74878488435711249209e-38,    1.10047068271422366943e-40, 3.18521787783591793076e-43,    6.42072520534847248278e-46, 8.59756395482527161007e-49,    7.19152946346337102982e-52, 3.45947793647555044453e-55,    8.51888308176163378638e-59, 9.01922230369355617950e-63,    3.08302899000327481204e-67, 1.97286057487945255443e-72,    5.90806786503120681541e-79 };

Gaussian_integrator::Gaussian_integrator(int nNodes, int nVars) {

    vector<double> nodes_1d(nNodes);
    vector<double> weights_1d(nNodes);

    switch (nNodes) {
        case 4:
            nodes_1d = nodes_4;
            weights_1d = weights_4;
           break;
        case 6:
            nodes_1d = nodes_6;
            weights_1d = weights_6;
            break;
        case 10:
            nodes_1d = nodes_10;
            weights_1d = weights_10;
            break;
        case 20:
            nodes_1d = nodes_20;
            weights_1d = weights_20;
            break;
        case 30:
            nodes_1d = nodes_30;
            weights_1d = weights_30;
            break;
        case 100:
            nodes_1d = nodes_100;
            weights_1d = weights_100;
            break;
        default: cout << "Invalid number of nodes for Gauss-hermite integration" << endl;
                 exit(0);
    }

    for (int i = 0; i < nNodes/2; ++i) {
        nodes_1d[i + nNodes/2] = -nodes_1d[i];
        weights_1d[i + nNodes/2] = weights_1d[i];
    }

    int nPoints = pow(nNodes, nVars);
    vector< vector<double> > x(nPoints, vector<double>(nVars,0.));
    vector<double> w(nPoints, 1.);
    for (int i = 0; i < nPoints; ++i) {
        int tmp = i;
        for (int j = 0; j < nVars; ++j) {
            x[i][j] = nodes_1d[tmp%nNodes];
            w[i] *= weights_1d[tmp%nNodes];
            tmp = tmp/nNodes;
        }
    }

    // Scaling to get rid of factors
    for (int i = 0; i < nPoints; ++i) {

        // Scaling of the weights
        w[i] /= pow(sqrt(PI),nVars);

        //Â Scaling of the points
        for (int j = 0; j < nVars; ++j) {
            x[i][j] *= sqrt(2);
        }
    }

    this->nodes = x;
    this->weights = w;
    this->nVars = nVars;
}

double Gaussian_integrator::quadnd(function<double(vector<double>)> f) {
    double result = 0.;
    for (unsigned int i = 0; i < nodes.size(); ++i) {
        result += f(nodes[i]) * weights[i];
    }
    return result;
}
